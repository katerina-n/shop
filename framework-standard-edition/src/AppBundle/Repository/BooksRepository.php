<?php

namespace AppBundle\Repository;

/**
 * BooksRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BooksRepository extends \Doctrine\ORM\EntityRepository
{
    public function showfiverandombooks($name_cat){
        $collection[] = $this->createQueryBuilder('books')
            ->select('books.name', 'books.photo', 'books.shortContent', 'books.sale', 'books.price')
            ->where('books.categoryBook = :fictions')
            ->andWhere('books.sale >0')
            ->setParameter('fictions', $name_cat)
            ->setMaxResults(2)
            ->getQuery()         //tochka posle zaprosa
            ->getResult();
        $collection[] = $this->createQueryBuilder('books')
            ->select('books.name', 'books.photo', 'books.shortContent', 'books.sale', 'books.price')
            ->where('books.categoryBook = :fictions')
            ->andWhere('books.sale = 0')
            ->setParameter('fictions', $name_cat)
            ->setMaxResults(3)
            ->getQuery()         //tochka posle zaprosa
            ->getResult();



        return $collection;

    }
    public function lastsixbooks()
    {

        $collection[] = $this->createQueryBuilder('books')
            ->select('books.photo')
            ->where('books.sale>0')
            ->setMaxResults(6)
            ->getQuery()//tochka posle zaprosa
            ->getResult();
        $element=$collection[0];
        $str=[];
        for($i=0; $i<=count($element)-1; $i++){
            $str[]=implode($element[$i]);
        }
        // dump($str);
        return $str;
    }
    public function lastnamebooks(){
        $collection[] = $this->createQueryBuilder('books')
            ->select('books.name', 'books.shortContent')
            ->where('books.sale>0')
            ->setMaxResults(6)
            ->getQuery()//tochka posle zaprosa
            ->getResult();
        $element=$collection[0];
        $str=[];
        for($i=0; $i<=count($element)-1; $i++){
            $str[]=implode($element[$i]);
        }
        //  dump($str);
        return $str;
    }
    public function bookpages($nameCategory, $id){
        $collections = $this->createQueryBuilder('books')
            ->where('books.categoryBook =:identifier')
            ->addOrderBy('books.id', 'ASC')
            ->setFirstResult(5*($id-1))
            ->setMaxResults(5)
            ->setParameters(['identifier'=>$nameCategory])
            ->getQuery()
            ->getResult();
       // dump($collections);
        return $collections;
    }
    public function pagination($nameCategory){
        $collections = $this->createQueryBuilder('books')
            ->where('books.categoryBook =:identifier')
            ->setParameters(['identifier'=>$nameCategory])
            ->getQuery()
            ->getResult();
       // dump($collections);
        $count = ceil(count($collections) / 5);
        return $count;
    }
    public function onebook($id){
        $collections = $this->createQueryBuilder('books')
            ->where('books.id =:identifier')
            ->setParameters(['identifier'=>$id])
            ->getQuery()
            ->getResult();
        return $collections;
    }
    public function findBookSale($value){
        $collections = $this->createQueryBuilder('books')
            ->where('books.categoryBook =:identifier')
            ->andWhere('books.sale>0')
            ->setParameters(['identifier'=>$value])
            ->getQuery()
            ->getResult();
        // dump($collections);
        return $collections;
    }


}
